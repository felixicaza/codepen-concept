---
import { Icon } from 'astro-icon/components'

import '@styles/editor.css'
---

<section>
  <div class="code-container">
    <div class="tools-container">
      <div class="code-tools">
        <button type="button" data-tab="html" class="active">
          <Icon name="container/html" size={20} />
        </button>
        <button type="button" data-tab="css">
          <Icon name="container/css" size={20} />
        </button>
        <button type="button" data-tab="js">
          <Icon name="container/javascript" size={20} />
        </button>
      </div>
      <div class="options-tools">
        <button type="button">
          <Icon name="container/settings" size={16} />
        </button>
        <button type="button">
          <Icon height={4} name="container/options" width={18} />
        </button>
      </div>
    </div>
    <div class="code"></div>
  </div>
  <div class="preview-container">
    <iframe id="preview" title="preview"></iframe>
    <button type="button">
      <Icon height={6} name="container/toolbar-options" width={28} />
    </button>
  </div>
</section>

<script>
  import { basicSetup } from 'codemirror'
  import { StateEffect } from '@codemirror/state'
  import { EditorView } from '@codemirror/view'
  import { html as langHTML } from '@codemirror/lang-html'
  import { css as langCSS } from '@codemirror/lang-css'
  import { javascript as langJS } from '@codemirror/lang-javascript'

  import theme from '@scripts/editor-theme'

  import html from '@data/html'
  import css from '@data/css'
  import javascript from '@data/javascript'

  const codeButtons = document.querySelector('.code-tools')
  const buttons = document.querySelectorAll('.code-tools button')
  const codeElement = document.querySelector('.code')
  const preview = document.querySelector('#preview') as HTMLIFrameElement

  const htmlCode = html
  const cssCode = css
  const jsCode = javascript

  let currentTab = 'html'
  let editor: EditorView | null = null

  const extensions = {
    html: langHTML(),
    css: langCSS(),
    js: langJS()
  }

  const docs = {
    html: htmlCode,
    css: cssCode,
    js: jsCode
  }

  const codeState = { ...docs }

  function getExtension(tab: string) {
    return extensions[tab as keyof typeof extensions]
  }

  function getDoc(tab: string) {
    return codeState[tab as keyof typeof codeState]
  }

  function setDoc(tab: string, value: string) {
    codeState[tab as keyof typeof codeState] = value
  }

  function debounce<T extends any[]>(fn: (...args: T) => void, delay: number | undefined) {
    let timer: ReturnType<typeof setTimeout> | undefined

    return function (...args: T) {
      clearTimeout(timer)
      timer = setTimeout(() => fn(...args), delay)
    }
  }

  function renderPreview() {
    if (!preview) return

    const doc = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8" />
        <style>${codeState.css}</style>
      </head>
      <body>
        ${codeState.html}
        <script type="module">${codeState.js}<\\/script>
      </body>
      </html>
    `
    preview.srcdoc = doc
  }

  const debouncedRender = debounce(renderPreview, 350)

  if (codeElement) {
    editor = new EditorView({
      doc: html,
      parent: codeElement,
      extensions: [
        basicSetup,
        langHTML(),
        theme,
        EditorView.updateListener.of((update) => {
          if (update.docChanged) {
            setDoc(currentTab, update.state.doc.toString())
            debouncedRender()
          }
        })
      ]
    })

    renderPreview()

    codeButtons?.addEventListener('click', (event) => {
      const { target } = event

      const btn = (target as Element).closest('button[data-tab]')
      const tab = btn?.getAttribute('data-tab')

      if (!tab || tab === currentTab) return

      setDoc(currentTab, editor?.state?.doc?.toString() ?? '')
      currentTab = tab

      editor?.dispatch({
        changes: { from: 0, to: editor.state.doc.length, insert: getDoc(tab) }
      })

      editor?.dispatch({
        effects: StateEffect.reconfigure.of([
          basicSetup,
          getExtension(tab) ?? langHTML(),
          theme,
          EditorView.updateListener.of((update) => {
            if (update.docChanged) {
              setDoc(currentTab, update.state.doc.toString())
              debouncedRender()
            }
          })
        ])
      })

      buttons.forEach((button) => {
        if (button.getAttribute('data-tab') === tab) {
          button.classList.add('active')
        } else {
          button.classList.remove('active')
        }
      })
    })
  }
</script>

<style>
  section {
    display: grid;
    grid-template-columns: 0.75fr 1fr;
    gap: 16px;
    background-color: #1a1a1a;
    width: 100%;
    max-width: 1856px;
    margin-inline: auto;
    margin-bottom: 32px;
    padding: 16px;
    border-radius: 32px;
    overflow-y: hidden;

    .code-container {
      display: grid;
      grid-template-rows: auto 1fr;
      gap: 16px;
      background: #0a0a0a;
      border-radius: 16px;
      padding: 24px 24px 21px 24px;
      overflow-y: inherit;

      .tools-container {
        display: flex;
        align-items: center;
        justify-content: space-between;

        .code-tools {
          display: flex;
          align-items: center;
          gap: 24px;

          button {
            --size: 48px;
            --active: linear-gradient(to top, #33a9dc, #33a9dc);
            --inactive: linear-gradient(to top, #111, #333);

            background: var(--inactive);
            border: none;
            cursor: pointer;
            display: grid;
            place-items: center;
            padding: 0;
            width: var(--size);
            height: var(--size);
            border-radius: 8px;
            transition: background 300ms ease, box-shadow 300ms ease;
            will-change: background, box-shadow;

            &.active {
              background: var(--active);
              box-shadow: 0 0 20px #33a9dc;
            }

            @media (any-hover: hover) {
              &:hover {
                background: var(--active);
                box-shadow: 0 0 20px #33a9dc;
              }
            }
          }
        }

        .options-tools {
          display: flex;
          align-items: center;
          gap: 16px;

          button {
            --size: 32px;

            width: var(--size);
            height: var(--size);
            display: grid;
            place-items: center;
            border: none;
            cursor: pointer;
            padding: 0px;
          }
        }
      }

      .code {
        overflow-y: inherit;
      }
    }

    .preview-container {
      position: relative;
      background-color: #0a0a0a;
      border-radius: 16px;

      #preview {
        width: 100%;
        height: 100%;
        border: none;
        border-radius: 16px;
      }

      button {
        --size: 48px;

        background-color: #0a0a0a;
        border: none;
        padding: 0;
        display: grid;
        place-items: center;
        border-radius: 8px;
        cursor: pointer;
        width: var(--size);
        height: var(--size);
        position: absolute;
        bottom: 0;
        right: 0;
        translate: -21px -24px;
      }
    }
  }
</style>
